<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project basedir="." name="Proxl Import API Ant run build jar" default="build_jar">

<!--	comment out to make false
	<property name="include_svn_info" value="true"/>
-->		
		
	<property name="java_target" value="1.7"/>
	<property name="java_source" value="1.7"/>
		
	<property name="java.source.character.set" value="iso-8859-1"/>
	

		
	<property name="output_jar" value="proxl_import_api.jar"/>
	
    <property name="deploy" value="deploy" />
    <property name="config" value="resources" />

	<property name="src_java_jaxb_classes_from_xsd" value="src_java_jaxb_classes_from_xsd" />

	<property name="src_create_import_file_from_java_objects" value="src_create_import_file_from_java_objects" />

	<property name="xsd" value="xsd" />

	
	
	<property name="classes" value="classes" />	

	
	<available file=".git" type="dir" property="git.present"/>
	
			
			
	
	<!-- ================================================================================== -->
	<!-- user defined values can be defined in build.properties -->
	<!-- ================================================================================== -->
	<property file="${basedir}${file.separator}build.properties" />
	
	<!-- ================================================================================== -->
  	<!-- PRINT HELP -->
	<!-- ================================================================================== -->
	<target name="help"   description="print this help">
		<exec executable="ant">
	   		<arg value="-p"/>
	  	</exec>
	</target>



	
	<target name="prepare">
    	<tstamp prefix="build-info">
			<format property="current-date" pattern="d-MMMM-yyyy" locale="en" />
			<format property="current-time" pattern="hh:mm:ss a z" locale="en" />
			<format property="year-month-day" pattern="yyyy-MM-dd" locale="en" />
		</tstamp>

    </target>
	
	<!-- ================================================================================== -->
	<!-- Build the jar -->
	<!-- ================================================================================== -->
	<target name="build_jar" depends="compile,prepare,git.revision"
			description="Packages the project as a jar file">
		
		
		<!-- exclude everything in the default package-->
		<jar destfile="${basedir}${file.separator}${deploy}${file.separator}${output_jar}" 
			basedir="${basedir}${file.separator}${classes}">

	        <manifest>
	        	<attribute name="GIT-last-tag-commit-hash" value="${git.last.tag.and.commit.hash}"/>
            	<attribute name="GIT-commit-hash" value="${git.last.commit.hash}"/>
    			
				<attribute name="Date" value="${build-info.current-date}" />
				<attribute name="Time" value="${build-info.current-time}" />
	        </manifest>
	
			<!--  			excludes="*.*"  --> 
			
		</jar>
		

		
	</target>
	

	<target name="git.revision" 
			description="Store git revision in ${git.last.tag.and.commit.hash} and ${git.last.commit.hash}" 
			if="git.present">
		
		<exec executable="git" outputproperty="git.last.tag.and.commit.hash.from.cmd" failifexecutionfails="false" errorproperty="">
			<arg value="describe"/>
			<arg value="--tags"/>
			<arg value="--always"/>
			<arg value="HEAD"/>
		</exec>
		
		<echo message="git.last.tag.and.commit.hash.from.cmd: ${git.last.tag.and.commit.hash.from.cmd}"/>
		
		<condition property="git.last.tag.and.commit.hash" value="${git.last.tag.and.commit.hash.from.cmd}" else="unknown">
			<and>
				<isset property="git.last.tag.and.commit.hash.from.cmd"/>
				<length string="${git.last.tag.and.commit.hash.from.cmd}" trim="yes" length="0" when="greater"/>
			</and>
		</condition>
		
		<echo message="git.last.tag.and.commit.hash: ${git.last.tag.and.commit.hash}"/>


		<exec executable="git" outputproperty="git.last.commit.hash.from.cmd" failifexecutionfails="false" errorproperty="">
			<arg value="describe"/>
			<arg value="--always"/>
			<arg value="HEAD"/>
		</exec>
				

		<echo message="git.last.commit.hash.from.cmd: ${git.last.commit.hash.from.cmd}"/>
		
		<condition property="git.last.commit.hash" value="${git.last.commit.hash.from.cmd}" else="unknown">
			<and>
				<isset property="git.last.commit.hash.from.cmd"/>
				<length string="${git.last.commit.hash.from.cmd}" trim="yes" length="0" when="greater"/>
			</and>
		</condition>
		
		<echo message="git.last.commit.hash: ${git.last.commit.hash}"/>
	
	</target>
					
	
	<!-- ================================================================================== -->
	<!-- Clean the build directory -->
	<!-- ================================================================================== -->
    <target name="clean" description="Prepare for clean build">
      <delete dir="${classes}"/>
      <mkdir  dir="${classes}"/>
      <delete dir="${deploy}" />
      <mkdir  dir="${deploy}"/>
    </target>
	
	<!-- ================================================================================== -->
	<!-- Normal build of application -->
	<!-- ================================================================================== -->
    <target name="compile" depends="clean">
    	<!-- <echo message="${toString:compile.classpath}"/> -->
        <javac includeantruntime="false"  debug="on" srcdir="src_java_jaxb_classes_from_xsd" destdir="${classes}" source="${java_source}" target="${java_target}"  encoding="${java.source.character.set}" >
            <classpath refid="compile.classpath"/>
        </javac>

        <javac includeantruntime="false"  debug="on" srcdir="src_create_import_file_from_java_objects" destdir="${classes}" source="${java_source}" target="${java_target}"  encoding="${java.source.character.set}" >
            <classpath refid="compile.classpath"/>
        </javac>

	<!--
  	<copy  todir="${classes}">

	</copy>
  	-->

  	  	<copy  todir="${classes}">
  	  		
  		    <fileset dir="${xsd}">
  				<exclude name="**/*.java" />
  		    </fileset>
  		</copy>
  		
    </target>
	
	<!-- classpath  -->
    <path id="compile.classpath">
    	
    	<!--
    	<fileset dir="lib">
        	<include name="**/*.jar"/>
      	</fileset>
      	-->
    	
    </path>
		

</project>